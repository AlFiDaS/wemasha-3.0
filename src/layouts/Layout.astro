---
import { ClientRouter } from 'astro:transitions';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';

interface Props {
	title: string;
	description?: string;
	keywords?: string;
	ogImage?: string;
	ogType?: string;
	canonical?: string;
}

const { 
	title, 
	description = "Descubre nuestra colecci√≥n de remeras y buzos oversize con dise√±os exclusivos de artistas internacionales como Jonas Brothers, Harry Styles, Taylor Swift, Slipknot y m√°s, as√≠ como √≠conos argentinos como Duki, Emilia Mernes, Messi y muchos otros. Tambi√©n personalizamos tus prendas con dise√±os √∫nicos de tus artistas favoritos y mascotas. Adem√°s, explora nuestras opciones streetwear, con estilos como mariposas y m√°s. ¬°Haz tu estilo √∫nico con nosotros!",
	keywords = "remeras, buzos, streetwear, artistas, duki, jonas brothers, taylor swift, personalizados, oversize",
	ogImage = "/images/categories/artistas.jpg",
	ogType = "website",
	canonical
} = Astro.props;
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		
		<!-- CSS Global -->
		<link rel="stylesheet" href="/global.css" />
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content={ogType} />
		<meta property="og:url" content={canonical || Astro.url.href} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={new URL(ogImage, Astro.url).href} />
		
		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={canonical || Astro.url.href} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={new URL(ogImage, Astro.url).href} />
		
		<!-- Canonical URL -->
		{canonical && <link rel="canonical" href={canonical} />}
		
		<!-- Additional SEO Meta Tags -->
		<meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
		<meta name="googlebot" content="index, follow" />
		<meta name="author" content="WeMasha" />
		<meta name="geo.region" content="AR-W" />
		<meta name="geo.placename" content="Corrientes" />
		<meta name="geo.position" content="-27.4692;-58.8306" />
		<meta name="ICBM" content="-27.4692, -58.8306" />
		
		<!-- Language and Locale -->
		<meta name="language" content="Spanish" />
		<meta name="locale" content="es_AR" />
		
		<!-- Mobile App Meta -->
		<meta name="mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
		
		<title>{title}</title>
		<ClientRouter />
	</head>
	<body>
		<Header />
		<main>
			<slot />
		</main>
		<Footer />
		<script type="module" src="/src/scripts/global.js"></script>
		<script type="module" src="/src/scripts/lazy-loading.js"></script>
		<script type="module" src="/src/scripts/performance.js"></script>
		<script type="module" src="/src/scripts/cache-debug.js"></script>
		<script type="module" src="/src/scripts/galeria-navigation.js"></script>

		<!-- Service Worker para optimizaci√≥n de galer√≠a -->
		<script>
			if ('serviceWorker' in navigator) {
				window.addEventListener('load', () => {
					navigator.serviceWorker.register('/sw.js')
						.then(registration => {
							console.log('‚úÖ Service Worker registrado:', registration.scope);
							
							// Verificar si hay una nueva versi√≥n del Service Worker
							registration.addEventListener('updatefound', () => {
								const newWorker = registration.installing;
								if (newWorker) {
									newWorker.addEventListener('statechange', () => {
										if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
											// Hay una nueva versi√≥n disponible
											console.log('üîÑ Nueva versi√≥n del Service Worker disponible');
											// Forzar actualizaci√≥n
											newWorker.postMessage({ type: 'SKIP_WAITING' });
											window.location.reload();
										}
									});
								}
							});
						})
						.catch(error => {
							console.log('‚ùå Error registrando Service Worker:', error);
						});
				});
			}
			
			// Funci√≥n para limpiar cach√© manualmente (√∫til para debugging)
			(window as any).clearCache = function() {
				if ('serviceWorker' in navigator) {
					navigator.serviceWorker.getRegistrations().then(registrations => {
						registrations.forEach(registration => {
							registration.unregister();
							console.log('üóëÔ∏è Service Worker desregistrado');
						});
					});
				}
				
				if ('caches' in window) {
					caches.keys().then(cacheNames => {
						cacheNames.forEach(cacheName => {
							caches.delete(cacheName);
							console.log(`üóëÔ∏è Cache eliminado: ${cacheName}`);
						});
					});
				}
				
				// Recargar la p√°gina despu√©s de limpiar
				setTimeout(() => {
					window.location.reload();
				}, 1000);
			};
		</script>

	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}

	<>
  #menu-panel {
    display: none;
  }
  #menu-panel[data-open="true"] {
    display: block;
  }
  #gallery-modal {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,0.85);
    z-index: 9999;
    align-items: center;
    justify-content: center;
  }
  #gallery-modal[data-open="true"] {
    display: flex;
  }
  #gallery-modal img[data-active] {
    max-width: 90%;
    max-height: 90%;
  }
  #gallery-modal [data-overlay] {
    position: absolute;
    inset: 0;
  }

</style>
