---
import Layout from "@layouts/LayoutCart.astro";
import Hero from "@components/Hero.astro";
import Modalidad from "@components/Modalidad.astro";
import { preciosEnvio } from "@lib/precios";
---

<Layout title="WeMasha - Remeras y Buzos Streetwear de tus Artistas Favoritos">
  <div class="max-w-[1440px] mx-auto">
    <Hero title="Carrito" image="/images/categories/personalizado.png" slug="" />
    <div class="max-w-[1200px] mx-auto grid items-center gap-8 mt-16">
      <div class="border border-zinc-300 rounded-2xl overflow-hidden p-8 flex flex-col gap-1 mx-4">
        
        <!-- Aqu√≠ comienza el carrito -->
        <div class="flex flex-col">
            <div class="flex items-center justify-between font-bold border-b border-zinc-200 py-4 px-2">
                <h2 class="text-xl md:text-2xl text-gray-900">üõí Carrito de Compras</h2>
                <div class="text-sm text-gray-500">
                    <span id="carrito-count">0</span> productos
                </div>
            </div>

            <!-- Contenedor de los productos del carrito -->
            <div id="carrito-items" class="flex flex-col gap-2 p-2">
            
            </div>

                <!-- Carrito vac√≠o -->
                <div id="carrito-vacio" class="items-center gap-4 border-b border-zinc-300 py-8 hidden">
                    <div class="text-center w-full">
                        <div class="text-6xl mb-4">üõçÔ∏è</div>
                        <span class="text-lg font-semibold text-gray-600">Tu carrito est√° vac√≠o</span>
                        <p class="text-sm text-gray-500 mt-2">¬°Agrega algunos productos para comenzar!</p>
                    </div>
                </div>

                <!-- Total del carrito -->
                <div class="mt-6 mb-4 p-4 bg-gradient-to-r from-pink-50 to-purple-50 rounded-xl border border-pink-100">
                    <div class="text-right">
                        <!-- Descuento por transferencia -->
                        <div id="descuento-transferencia" class="hidden mb-2">
                            <span class="text-sm text-green-600 font-medium">Descuento por transferencia: -$<span id="monto-descuento">0</span></span>
                        </div>
                        <span class="text-sm text-gray-600">Total a pagar:</span>
                        <div class="text-2xl md:text-3xl font-bold text-pink-500">
                            AR$<span id="total-precio">0</span>
                        </div>
                    </div>
                </div>

                <div class="items-center gap-4">
                  <span class="text-center w-full font-bold">Informaci√≥n del comprador</span>
                  <form class="mt-4 flex flex-col gap-4" action="">
                    <input name="nombre" id="nombre" placeholder="Nombre y Apellido"  class="w-full rounded-lg border border-zinc-300 p-2" required />
                    <select name="metodo-pago" id="metodo-pago" class="w-full rounded-lg border border-zinc-300 p-2" required>
                      <option value="Tarjeta">Pago con tarjeta (hasta 2 cuotas sin interes)</option>
                      <option value="Transferencia">Pago por transferencia (15% de descuento)</option>
                    </select>
                    <span class="text-xs text-zinc-600 ">Los pagos por transferencia tienen un 15% de descuento.</span>
                    <select name="envio" id="envio" class="w-full rounded-lg border border-zinc-300 p-2" required>
                      <option value="Corrientes">Retiro en Ciudad de Corrientes</option>
                      <option value="Motomandado">Motomandado en Ciudad de Corrientes (Precio a coordinar)</option>
                      <option value="">------------------------------------------------------------</option>
                      <option value="Sucursal">Envio a Sucursal de Correo Argentino a elecci√≥n (${preciosEnvio.sucursal.toLocaleString('es-AR')})</option>
                      <option value="Domicilio">Envio a Domicilio por Correo Argentino (${preciosEnvio.domicilio.toLocaleString('es-AR')})</option>
                      <!-- <option value="Resistencia">Retiro en Ciudad de Resistencia (Chaco)</option> -->
                    </select>
                    <span class="text-xs text-zinc-600 ">Los pedidos mayores a $150.000 tienen envio GRATIS a domicilio.</span>
                    <span class="text-xs text-zinc-600 ">Los envios de correo argentino son de modalidad Clasico y tardan de 2 a 5 dias habiles en llegar a destino.</span>
                    <span class="text-xs text-zinc-600 ">Los envios de modalidad Expreso tardan de 1 a 3 dias habiles en llegar pero tienen costos mas elevados, consultar por whatsapp.</span>
                    
                    <!-- Campos para env√≠o por correo -->
                    <div id="campos-correo" class="hidden space-y-4">
                      <input name="provincia" id="provincia" placeholder="Provincia" class="w-full rounded-lg border border-zinc-300 p-2" />
                      <input name="localidad" id="localidad" placeholder="Localidad" class="w-full rounded-lg border border-zinc-300 p-2" />
                      <input name="direccion" id="direccion" placeholder="Sucursal o direcci√≥n para envio"  class="w-full rounded-lg border border-zinc-300 p-2" />
                      <input name="postal" id="postal" placeholder="C√≥digo Postal" class="w-full rounded-lg border border-zinc-300 p-2" />
                    </div>
                    
                    <!-- Campo para motomandado -->
                    <div id="campo-motomandado" class="hidden">
                      <input name="direccion-motomandado" id="direccion-motomandado" placeholder="Direcci√≥n: Calle Siempreviva 123" class="w-full rounded-lg border border-zinc-300 p-2" />
                    </div>
                    
                    <!-- Email (siempre visible pero con validaci√≥n condicional) -->
                    <div class="email-container">
                      <input name="email" id="email" type="email" placeholder="Email" class="w-full rounded-lg border border-zinc-300 p-2" />
                    </div>
                    
                    <!-- Aclaraciones -->
                    <input name="aclaraciones" id="aclaraciones" placeholder="Aclaraciones" class="w-full rounded-lg border border-zinc-300 p-2"/>
                  </form>
                  <div id="error" class="w-full mt-4 hidden">
                    <span
                      class="w-full bg-gradient-to-r from-red-500 to-red-600 text-white text-center py-3 px-6 rounded-xl font-semibold shadow-lg"
                      >Es necesario completar todos los campos.</span>
                  </div>
                  <div class="mt-4 flex flex-col gap-4 justify-center">
                    <button
                      type="submit"
                      id="comprar-carrito"
                      class="w-full bg-gradient-to-r from-pink-500 to-pink-600 hover:from-pink-600 hover:to-pink-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-[1.02] shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                      >Realizar Pedido</button>
                    <button id="vaciar-carrito" class="w-full bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-[1.02] shadow-lg hover:shadow-xl">
                      Vaciar Carrito
                    </button>
                  </div>
                </div>
        </div>
      </div>
    </div>
    <Modalidad />
  </div>
</Layout>

<script>
    import { cargarCarrito, actualizarCantidad } from "@scripts/getCarrito";
    import { sumarEnvio, sumarMetodoPago } from "@scripts/sumarExtras";
    import { vaciarCarrito, validarFormulario, eliminarProducto } from "@scripts/carritoFunctions";
    import {enviarMensaje} from "@scripts/enviarMensaje";

    const carritoItems = document.querySelector('#carrito-items') as HTMLElement;
    const totalPrecioElement = document.querySelector('#total-precio') as HTMLElement;
    const vaciarCarritoBtn = document.querySelector('#vaciar-carrito') as HTMLElement;
    const comprarCarritoBtn = document.querySelector('#comprar-carrito') as HTMLElement;
    const envioSelect = document.querySelector('#envio') as HTMLSelectElement;
    const metodoPagoSelect = document.querySelector('#metodo-pago') as HTMLSelectElement;
    const camposCorreo = document.querySelector('#campos-correo') as HTMLElement;
    const campoMotomandado = document.querySelector('#campo-motomandado') as HTMLElement;
    const emailContainer = document.querySelector('.email-container') as HTMLElement;
    const aclaracionesInput = document.querySelector('#aclaraciones') as HTMLInputElement;
    const descuentoTransferencia = document.querySelector('#descuento-transferencia') as HTMLElement;
    const montoDescuento = document.querySelector('#monto-descuento') as HTMLElement;
    let subTotal = 0;

    // Removemos la funci√≥n local actualizarCantidad duplicada
    // function actualizarCantidad(index: number, nuevaCantidad: number) {
    //   let carrito: any[] = [];
    //   try {
    //     const raw = localStorage.getItem('carrito') || '[]';
    //     carrito = JSON.parse(raw);
    //     if (!Array.isArray(carrito)) carrito = [];
    //   } catch {
    //     carrito = [];
    //   }

    //   // Si la cantidad es 0 o menor, eliminar el producto
    //   if (nuevaCantidad <= 0) {
    //     carrito.splice(index, 1);
    //     localStorage.setItem('carrito', JSON.stringify(carrito));
    //     window.dispatchEvent(new Event('carrito:actualizado'));
    //     return;
    //   }

    //   // Actualizar la cantidad del producto
    //   if (carrito[index]) {
    //     carrito[index].cantidad = nuevaCantidad;
    //     localStorage.setItem('carrito', JSON.stringify(carrito));
    //     window.dispatchEvent(new Event('carrito:actualizado'));
    //   }
    // }

    // Removemos la funci√≥n local eliminarProducto duplicada
    // function eliminarProducto(index: number) {
    //   let carrito: any[] = [];
    //   try {
    //     const raw = localStorage.getItem('carrito') || '[]';
    //     carrito = JSON.parse(raw);
    //     if (!Array.isArray(carrito)) carrito = [];
    //   } catch {
    //     carrito = [];
    //   }

    //   carrito.splice(index, 1);
    //   localStorage.setItem('carrito', JSON.stringify(carrito));
    //   window.dispatchEvent(new Event('carrito:actualizado'));
    // }

    // Funci√≥n para manejar el cambio de env√≠o
    function manejarCambioEnvio() {
      const envioSeleccionado = envioSelect.value;
      
      // Ocultar todos los campos primero
      camposCorreo.classList.add('hidden');
      campoMotomandado.classList.add('hidden');
      emailContainer.classList.add('hidden');
      
      // Resetear placeholders y required
      document.querySelectorAll('.email-container input').forEach((input: any) => {
        input.required = true;
      });
      aclaracionesInput.placeholder = 'Aclaraciones';
      
      // Mostrar campos seg√∫n la opci√≥n seleccionada
      switch (envioSeleccionado) {
        case 'Corrientes':
          // Solo aclaraciones con ejemplo
          aclaracionesInput.placeholder = 'Aclaraciones: Retiro el mi√©rcoles, port√≥n negro, no funciona el timbre, otras aclaraciones.';
          document.querySelectorAll('.email-container input').forEach((input: any) => {
            input.required = false;
          });
          break;
          
        case 'Motomandado':
          // Campo de direcci√≥n para motomandado
          campoMotomandado.classList.remove('hidden');
          document.querySelectorAll('.email-container input').forEach((input: any) => {
            input.required = false;
          });
          break;
          
        case 'Sucursal':
        case 'Domicilio':
          // Todos los campos de correo
          camposCorreo.classList.remove('hidden');
          emailContainer.classList.remove('hidden');
          // Hacer required los campos de correo
          document.querySelectorAll('#campos-correo input').forEach((input: any) => {
            input.required = true;
          });
          document.querySelectorAll('.email-container input').forEach((input: any) => {
            input.required = true;
          });
          break;
          
        default:
          // Opci√≥n por defecto o separador
          break;
      }
    }
    
    // Cargar el carrito al cargar la p√°gina y devolver el total
    document.addEventListener('DOMContentLoaded', () => {
      subTotal = cargarCarrito() as number;
      const totalPrecio = sumarEnvio(subTotal as number);
      totalPrecioElement.textContent = totalPrecio.toLocaleString('es-AR');
      
      // Inicializar el estado de los campos de env√≠o
      manejarCambioEnvio();
      
      // Inicializar el descuento por transferencia
      actualizarDescuentoTransferencia();
    });

    // Event listener para el cambio de env√≠o
    envioSelect.addEventListener('change', manejarCambioEnvio);

    // Event listener para los controles de cantidad
    carritoItems.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;
      
      // Buscar el data-index en el elemento clickeado o en su padre m√°s cercano
      let elementWithIndex = target;
      let index = -1;
      
      // Buscar en el elemento actual y sus padres
      while (elementWithIndex && index === -1) {
        index = elementWithIndex.dataset.index ? parseInt(elementWithIndex.dataset.index, 10) : -1;
        if (index === -1) {
          elementWithIndex = elementWithIndex.parentElement as HTMLElement;
        }
      }
      
      if (index === -1) return;

      if (target.classList.contains('cantidad-btn-minus')) {
        let carrito: any[] = [];
        try {
          const raw = localStorage.getItem('carrito') || '[]';
          carrito = JSON.parse(raw);
          if (!Array.isArray(carrito)) carrito = [];
        } catch {
          carrito = [];
        }
        const cantidadActual = carrito[index]?.cantidad || 1;
        actualizarCantidad(index, cantidadActual - 1);
      } else if (target.classList.contains('cantidad-btn-plus')) {
        let carrito: any[] = [];
        try {
          const raw = localStorage.getItem('carrito') || '[]';
          carrito = JSON.parse(raw);
          if (!Array.isArray(carrito)) carrito = [];
        } catch {
          carrito = [];
        }
        const cantidadActual = carrito[index]?.cantidad || 1;
        actualizarCantidad(index, cantidadActual + 1);
      } else if (target.classList.contains('eliminar-btn') || target.closest('.eliminar-btn')) {
        eliminarProducto(index);
      }
    });

    // Funci√≥n para mostrar/ocultar descuento por transferencia
    function actualizarDescuentoTransferencia() {
      const metodoPago = metodoPagoSelect.value;
      const totalEnvio = sumarEnvio(subTotal as number);
      
      if (metodoPago === "Transferencia") {
        const descuento = Math.round(totalEnvio * 0.15); // 15% de descuento
        montoDescuento.textContent = descuento.toLocaleString('es-AR');
        descuentoTransferencia.classList.remove('hidden');
      } else {
        descuentoTransferencia.classList.add('hidden');
      }
    }

    // Mostrar total con envio y metodo de pago al cambiar selecci√≥n
    envioSelect.addEventListener('change', () => {
      const totalEnvio = sumarEnvio(subTotal as number);
      const totalPrecio = sumarMetodoPago(totalEnvio as number);
      totalPrecioElement.textContent = totalPrecio.toLocaleString('es-AR');
      actualizarDescuentoTransferencia();
    });

    metodoPagoSelect.addEventListener('change', () => {
      const totalEnvio = sumarEnvio(subTotal as number);
      const totalPrecio = sumarMetodoPago(totalEnvio as number);
      totalPrecioElement.textContent = totalPrecio.toLocaleString('es-AR');
      actualizarDescuentoTransferencia();
    });

    // Escuchar cambios en el carrito para actualizar el total
    window.addEventListener('carrito:actualizado', () => {
      // Actualizar la visualizaci√≥n del carrito en modo silencioso para evitar bucle
      cargarCarrito(true);
      
      // Calcular el total manualmente
      let carrito: any[] = [];
      try {
        const raw = localStorage.getItem('carrito') || '[]';
        carrito = JSON.parse(raw);
        if (!Array.isArray(carrito)) carrito = [];
      } catch {
        carrito = [];
      }

      // Calcular el subtotal
      subTotal = carrito.reduce((total, producto) => {
        const precio = Number(producto.precio) || 0;
        const cantidad = Number(producto.cantidad) || 1;
        return total + (precio * cantidad);
      }, 0);

      const totalEnvio = sumarEnvio(subTotal as number);
      const totalPrecio = sumarMetodoPago(totalEnvio as number);
      totalPrecioElement.textContent = totalPrecio.toLocaleString('es-AR');
      actualizarDescuentoTransferencia();
    });

  // Evento para vaciar el carrito
  vaciarCarritoBtn.addEventListener('click', () => {
    vaciarCarrito();
    subTotal = 0; // El carrito est√° vac√≠o, as√≠ que el subtotal es 0
    const totalEnvio = sumarEnvio(subTotal as number);
    const totalPrecio = sumarMetodoPago(totalEnvio as number);
    totalPrecioElement.textContent = totalPrecio.toLocaleString('es-AR');
    actualizarDescuentoTransferencia();
  });

  // Evento para el bot√≥n de realizar pedido
  comprarCarritoBtn.addEventListener('click', (event) => {
    event.preventDefault(); // Prevenimos el env√≠o del formulario
    const formularioValido = validarFormulario();
    if (formularioValido) {
      enviarMensaje();
    } 
  });
</script>

